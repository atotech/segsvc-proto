// Code generated by protoc-gen-gogo.
// source: segstore.proto
// DO NOT EDIT!

/*
	Package segstore is a generated protocol buffer package.

	It is generated from these files:
		segstore.proto

	It has these top-level messages:
		SegmentDefsRequest
		SegmentData
		SegmentConfig
		ExperimentsRequest
		ExperimentsResponse
		ExperimentMetadata
*/
package segstore

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ExperimentType int32

const (
	NONE    ExperimentType = 0
	SEGMENT ExperimentType = 1
	GEO     ExperimentType = 2
	REWARD  ExperimentType = 3
	CRM     ExperimentType = 4
)

var ExperimentType_name = map[int32]string{
	0: "NONE",
	1: "SEGMENT",
	2: "GEO",
	3: "REWARD",
	4: "CRM",
}
var ExperimentType_value = map[string]int32{
	"NONE":    0,
	"SEGMENT": 1,
	"GEO":     2,
	"REWARD":  3,
	"CRM":     4,
}

func (ExperimentType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSegstore, []int{0} }

type SegmentDefsRequest struct {
}

func (m *SegmentDefsRequest) Reset()                    { *m = SegmentDefsRequest{} }
func (*SegmentDefsRequest) ProtoMessage()               {}
func (*SegmentDefsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSegstore, []int{0} }

type SegmentData struct {
	Data map[string]*SegmentConfig `protobuf:"bytes,1,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SegmentData) Reset()                    { *m = SegmentData{} }
func (*SegmentData) ProtoMessage()               {}
func (*SegmentData) Descriptor() ([]byte, []int) { return fileDescriptorSegstore, []int{1} }

func (m *SegmentData) GetData() map[string]*SegmentConfig {
	if m != nil {
		return m.Data
	}
	return nil
}

type SegmentConfig struct {
	Order   int64 `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	Qualify int64 `protobuf:"varint,2,opt,name=qualify,proto3" json:"qualify,omitempty"`
}

func (m *SegmentConfig) Reset()                    { *m = SegmentConfig{} }
func (*SegmentConfig) ProtoMessage()               {}
func (*SegmentConfig) Descriptor() ([]byte, []int) { return fileDescriptorSegstore, []int{2} }

func (m *SegmentConfig) GetOrder() int64 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *SegmentConfig) GetQualify() int64 {
	if m != nil {
		return m.Qualify
	}
	return 0
}

type ExperimentsRequest struct {
	Labels string `protobuf:"bytes,1,opt,name=labels,proto3" json:"labels,omitempty"`
	URL    string `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
}

func (m *ExperimentsRequest) Reset()                    { *m = ExperimentsRequest{} }
func (*ExperimentsRequest) ProtoMessage()               {}
func (*ExperimentsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSegstore, []int{3} }

func (m *ExperimentsRequest) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *ExperimentsRequest) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

type ExperimentsResponse struct {
	Data []*ExperimentMetadata `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *ExperimentsResponse) Reset()                    { *m = ExperimentsResponse{} }
func (*ExperimentsResponse) ProtoMessage()               {}
func (*ExperimentsResponse) Descriptor() ([]byte, []int) { return fileDescriptorSegstore, []int{4} }

func (m *ExperimentsResponse) GetData() []*ExperimentMetadata {
	if m != nil {
		return m.Data
	}
	return nil
}

type ExperimentMetadata struct {
	BaseName       string         `protobuf:"bytes,1,opt,name=baseName,proto3" json:"baseName,omitempty"`
	ExperimentType ExperimentType `protobuf:"varint,2,opt,name=experimentType,proto3,enum=segstore.ExperimentType" json:"experimentType,omitempty"`
	Segments       []string       `protobuf:"bytes,3,rep,name=segments" json:"segments,omitempty"`
}

func (m *ExperimentMetadata) Reset()                    { *m = ExperimentMetadata{} }
func (*ExperimentMetadata) ProtoMessage()               {}
func (*ExperimentMetadata) Descriptor() ([]byte, []int) { return fileDescriptorSegstore, []int{5} }

func (m *ExperimentMetadata) GetBaseName() string {
	if m != nil {
		return m.BaseName
	}
	return ""
}

func (m *ExperimentMetadata) GetExperimentType() ExperimentType {
	if m != nil {
		return m.ExperimentType
	}
	return NONE
}

func (m *ExperimentMetadata) GetSegments() []string {
	if m != nil {
		return m.Segments
	}
	return nil
}

func init() {
	proto.RegisterType((*SegmentDefsRequest)(nil), "segstore.SegmentDefsRequest")
	proto.RegisterType((*SegmentData)(nil), "segstore.SegmentData")
	proto.RegisterType((*SegmentConfig)(nil), "segstore.SegmentConfig")
	proto.RegisterType((*ExperimentsRequest)(nil), "segstore.ExperimentsRequest")
	proto.RegisterType((*ExperimentsResponse)(nil), "segstore.ExperimentsResponse")
	proto.RegisterType((*ExperimentMetadata)(nil), "segstore.ExperimentMetadata")
	proto.RegisterEnum("segstore.ExperimentType", ExperimentType_name, ExperimentType_value)
}
func (x ExperimentType) String() string {
	s, ok := ExperimentType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SegmentDefsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SegmentDefsRequest)
	if !ok {
		that2, ok := that.(SegmentDefsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *SegmentData) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SegmentData)
	if !ok {
		that2, ok := that.(SegmentData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *SegmentConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SegmentConfig)
	if !ok {
		that2, ok := that.(SegmentConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Order != that1.Order {
		return false
	}
	if this.Qualify != that1.Qualify {
		return false
	}
	return true
}
func (this *ExperimentsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExperimentsRequest)
	if !ok {
		that2, ok := that.(ExperimentsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Labels != that1.Labels {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	return true
}
func (this *ExperimentsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExperimentsResponse)
	if !ok {
		that2, ok := that.(ExperimentsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *ExperimentMetadata) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExperimentMetadata)
	if !ok {
		that2, ok := that.(ExperimentMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.BaseName != that1.BaseName {
		return false
	}
	if this.ExperimentType != that1.ExperimentType {
		return false
	}
	if len(this.Segments) != len(that1.Segments) {
		return false
	}
	for i := range this.Segments {
		if this.Segments[i] != that1.Segments[i] {
			return false
		}
	}
	return true
}
func (this *SegmentDefsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&segstore.SegmentDefsRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SegmentData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&segstore.SegmentData{")
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]*SegmentConfig{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%#v: %#v,", k, this.Data[k])
	}
	mapStringForData += "}"
	if this.Data != nil {
		s = append(s, "Data: "+mapStringForData+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SegmentConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&segstore.SegmentConfig{")
	s = append(s, "Order: "+fmt.Sprintf("%#v", this.Order)+",\n")
	s = append(s, "Qualify: "+fmt.Sprintf("%#v", this.Qualify)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExperimentsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&segstore.ExperimentsRequest{")
	s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	s = append(s, "URL: "+fmt.Sprintf("%#v", this.URL)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExperimentsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&segstore.ExperimentsResponse{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExperimentMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&segstore.ExperimentMetadata{")
	s = append(s, "BaseName: "+fmt.Sprintf("%#v", this.BaseName)+",\n")
	s = append(s, "ExperimentType: "+fmt.Sprintf("%#v", this.ExperimentType)+",\n")
	s = append(s, "Segments: "+fmt.Sprintf("%#v", this.Segments)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSegstore(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSegstore(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SegStore service

type SegStoreClient interface {
	SegmentDefs(ctx context.Context, in *SegmentDefsRequest, opts ...grpc.CallOption) (*SegmentData, error)
	Experiments(ctx context.Context, in *ExperimentsRequest, opts ...grpc.CallOption) (*ExperimentsResponse, error)
}

type segStoreClient struct {
	cc *grpc.ClientConn
}

func NewSegStoreClient(cc *grpc.ClientConn) SegStoreClient {
	return &segStoreClient{cc}
}

func (c *segStoreClient) SegmentDefs(ctx context.Context, in *SegmentDefsRequest, opts ...grpc.CallOption) (*SegmentData, error) {
	out := new(SegmentData)
	err := grpc.Invoke(ctx, "/segstore.SegStore/SegmentDefs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segStoreClient) Experiments(ctx context.Context, in *ExperimentsRequest, opts ...grpc.CallOption) (*ExperimentsResponse, error) {
	out := new(ExperimentsResponse)
	err := grpc.Invoke(ctx, "/segstore.SegStore/Experiments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SegStore service

type SegStoreServer interface {
	SegmentDefs(context.Context, *SegmentDefsRequest) (*SegmentData, error)
	Experiments(context.Context, *ExperimentsRequest) (*ExperimentsResponse, error)
}

func RegisterSegStoreServer(s *grpc.Server, srv SegStoreServer) {
	s.RegisterService(&_SegStore_serviceDesc, srv)
}

func _SegStore_SegmentDefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentDefsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegStoreServer).SegmentDefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/segstore.SegStore/SegmentDefs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegStoreServer).SegmentDefs(ctx, req.(*SegmentDefsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegStore_Experiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExperimentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegStoreServer).Experiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/segstore.SegStore/Experiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegStoreServer).Experiments(ctx, req.(*ExperimentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SegStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "segstore.SegStore",
	HandlerType: (*SegStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SegmentDefs",
			Handler:    _SegStore_SegmentDefs_Handler,
		},
		{
			MethodName: "Experiments",
			Handler:    _SegStore_Experiments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "segstore.proto",
}

func (m *SegmentDefsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentDefsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SegmentData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0xa
			i++
			v := m.Data[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovSegstore(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovSegstore(uint64(len(k))) + msgSize
			i = encodeVarintSegstore(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSegstore(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintSegstore(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *SegmentConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Order != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSegstore(dAtA, i, uint64(m.Order))
	}
	if m.Qualify != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSegstore(dAtA, i, uint64(m.Qualify))
	}
	return i, nil
}

func (m *ExperimentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExperimentsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Labels) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSegstore(dAtA, i, uint64(len(m.Labels)))
		i += copy(dAtA[i:], m.Labels)
	}
	if len(m.URL) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSegstore(dAtA, i, uint64(len(m.URL)))
		i += copy(dAtA[i:], m.URL)
	}
	return i, nil
}

func (m *ExperimentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExperimentsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSegstore(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ExperimentMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExperimentMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BaseName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSegstore(dAtA, i, uint64(len(m.BaseName)))
		i += copy(dAtA[i:], m.BaseName)
	}
	if m.ExperimentType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSegstore(dAtA, i, uint64(m.ExperimentType))
	}
	if len(m.Segments) > 0 {
		for _, s := range m.Segments {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeFixed64Segstore(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Segstore(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSegstore(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SegmentDefsRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SegmentData) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSegstore(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSegstore(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSegstore(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SegmentConfig) Size() (n int) {
	var l int
	_ = l
	if m.Order != 0 {
		n += 1 + sovSegstore(uint64(m.Order))
	}
	if m.Qualify != 0 {
		n += 1 + sovSegstore(uint64(m.Qualify))
	}
	return n
}

func (m *ExperimentsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Labels)
	if l > 0 {
		n += 1 + l + sovSegstore(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovSegstore(uint64(l))
	}
	return n
}

func (m *ExperimentsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovSegstore(uint64(l))
		}
	}
	return n
}

func (m *ExperimentMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.BaseName)
	if l > 0 {
		n += 1 + l + sovSegstore(uint64(l))
	}
	if m.ExperimentType != 0 {
		n += 1 + sovSegstore(uint64(m.ExperimentType))
	}
	if len(m.Segments) > 0 {
		for _, s := range m.Segments {
			l = len(s)
			n += 1 + l + sovSegstore(uint64(l))
		}
	}
	return n
}

func sovSegstore(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSegstore(x uint64) (n int) {
	return sovSegstore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SegmentDefsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SegmentDefsRequest{`,
		`}`,
	}, "")
	return s
}
func (this *SegmentData) String() string {
	if this == nil {
		return "nil"
	}
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]*SegmentConfig{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%v: %v,", k, this.Data[k])
	}
	mapStringForData += "}"
	s := strings.Join([]string{`&SegmentData{`,
		`Data:` + mapStringForData + `,`,
		`}`,
	}, "")
	return s
}
func (this *SegmentConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SegmentConfig{`,
		`Order:` + fmt.Sprintf("%v", this.Order) + `,`,
		`Qualify:` + fmt.Sprintf("%v", this.Qualify) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExperimentsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExperimentsRequest{`,
		`Labels:` + fmt.Sprintf("%v", this.Labels) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExperimentsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExperimentsResponse{`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "ExperimentMetadata", "ExperimentMetadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExperimentMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExperimentMetadata{`,
		`BaseName:` + fmt.Sprintf("%v", this.BaseName) + `,`,
		`ExperimentType:` + fmt.Sprintf("%v", this.ExperimentType) + `,`,
		`Segments:` + fmt.Sprintf("%v", this.Segments) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSegstore(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SegmentDefsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSegstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentDefsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentDefsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSegstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSegstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSegstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSegstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSegstore
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Data == nil {
				m.Data = make(map[string]*SegmentConfig)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSegstore
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSegstore
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthSegstore
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthSegstore
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &SegmentConfig{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Data[mapkey] = mapvalue
			} else {
				var mapvalue *SegmentConfig
				m.Data[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSegstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSegstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSegstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qualify", wireType)
			}
			m.Qualify = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qualify |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSegstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSegstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExperimentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSegstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExperimentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExperimentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSegstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSegstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExperimentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSegstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExperimentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExperimentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSegstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &ExperimentMetadata{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSegstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSegstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExperimentMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSegstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExperimentMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExperimentMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExperimentType", wireType)
			}
			m.ExperimentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExperimentType |= (ExperimentType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSegstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSegstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segments = append(m.Segments, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSegstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSegstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSegstore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSegstore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSegstore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSegstore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSegstore
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSegstore
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSegstore(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSegstore = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSegstore   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("segstore.proto", fileDescriptorSegstore) }

var fileDescriptorSegstore = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x3d, 0x8f, 0xd3, 0x40,
	0x10, 0xf5, 0xc6, 0xb9, 0x7c, 0x8c, 0x45, 0x64, 0x0d, 0x07, 0x58, 0xd1, 0xb1, 0x44, 0xae, 0x22,
	0x04, 0x11, 0xca, 0x35, 0x88, 0x82, 0xaf, 0x8b, 0x95, 0xe6, 0x92, 0x43, 0x9b, 0x43, 0xd4, 0x1b,
	0xdd, 0x24, 0x8a, 0xc8, 0xc5, 0x39, 0xaf, 0x83, 0x48, 0xc7, 0x2f, 0x40, 0x14, 0xd4, 0xd4, 0xfc,
	0x14, 0xca, 0x2b, 0x29, 0x89, 0x69, 0x28, 0xef, 0x27, 0xa0, 0xb5, 0x63, 0x27, 0x26, 0xa1, 0xb1,
	0xf6, 0xcd, 0xbc, 0x79, 0x7e, 0xfb, 0x3c, 0x86, 0x9a, 0xa2, 0xb1, 0x0a, 0xfd, 0x80, 0x5a, 0xf3,
	0xc0, 0x0f, 0x7d, 0xac, 0xa4, 0xd8, 0x3d, 0x04, 0x1c, 0xd0, 0xf8, 0x92, 0x66, 0x61, 0x87, 0x46,
	0x4a, 0xd0, 0xd5, 0x82, 0x54, 0xe8, 0x7e, 0x65, 0x60, 0xa5, 0x65, 0x19, 0x4a, 0x3c, 0x86, 0xe2,
	0x85, 0x0c, 0xa5, 0xc3, 0x1a, 0x66, 0xd3, 0x6a, 0x3f, 0x68, 0x65, 0x72, 0x5b, 0xa4, 0x96, 0x7e,
	0x78, 0xb3, 0x30, 0x58, 0x8a, 0x98, 0x5c, 0x7f, 0x03, 0xd5, 0xac, 0x84, 0x36, 0x98, 0xef, 0x69,
	0xe9, 0xb0, 0x06, 0x6b, 0x56, 0x85, 0x3e, 0xe2, 0x63, 0x38, 0xf8, 0x20, 0xa7, 0x0b, 0x72, 0x0a,
	0x0d, 0xd6, 0xb4, 0xda, 0xf7, 0x76, 0x44, 0x4f, 0xfc, 0xd9, 0x68, 0x32, 0x16, 0x09, 0xeb, 0x59,
	0xe1, 0x29, 0x73, 0x5f, 0xc0, 0xad, 0x5c, 0x0f, 0x0f, 0xe1, 0xc0, 0x0f, 0x2e, 0x28, 0x88, 0x75,
	0x4d, 0x91, 0x00, 0x74, 0xa0, 0x7c, 0xb5, 0x90, 0xd3, 0xc9, 0x68, 0x19, 0x6b, 0x9b, 0x22, 0x85,
	0xee, 0x73, 0x40, 0xef, 0xe3, 0x9c, 0x82, 0x89, 0xd6, 0x48, 0x6f, 0x8b, 0x77, 0xa1, 0x34, 0x95,
	0x43, 0x9a, 0xaa, 0xb5, 0xbd, 0x35, 0xd2, 0x9e, 0xdf, 0x8a, 0xd3, 0x58, 0xa3, 0x2a, 0xf4, 0xd1,
	0xed, 0xc2, 0xed, 0xdc, 0xbc, 0x9a, 0xfb, 0x33, 0x45, 0xf8, 0x24, 0x17, 0xcf, 0xd1, 0xe6, 0x26,
	0x1b, 0x72, 0x8f, 0x42, 0xa9, 0x39, 0x49, 0x36, 0xee, 0x67, 0xb6, 0xed, 0x24, 0x6d, 0x62, 0x1d,
	0x2a, 0x43, 0xa9, 0xa8, 0x2f, 0x2f, 0x69, 0xed, 0x25, 0xc3, 0xf8, 0x12, 0x6a, 0x94, 0x4d, 0x9c,
	0x2f, 0xe7, 0x49, 0x70, 0xb5, 0xb6, 0xb3, 0xef, 0x75, 0xba, 0x2f, 0xfe, 0xe1, 0x6b, 0x75, 0x95,
	0xc4, 0xa7, 0x1c, 0xb3, 0x61, 0x6a, 0xf5, 0x14, 0x3f, 0xf4, 0xa0, 0x96, 0x9f, 0xc6, 0x0a, 0x14,
	0xfb, 0x67, 0x7d, 0xcf, 0x36, 0xd0, 0x82, 0xf2, 0xc0, 0xeb, 0xf6, 0xbc, 0xfe, 0xb9, 0xcd, 0xb0,
	0x0c, 0x66, 0xd7, 0x3b, 0xb3, 0x0b, 0x08, 0x50, 0x12, 0xde, 0xbb, 0x57, 0xa2, 0x63, 0x9b, 0xba,
	0x78, 0x22, 0x7a, 0x76, 0xb1, 0xfd, 0x8d, 0x41, 0x65, 0x40, 0xe3, 0x81, 0xb6, 0x83, 0x9d, 0xcd,
	0x12, 0xd1, 0x48, 0xe1, 0xd1, 0xee, 0xda, 0x6c, 0x56, 0xae, 0x7e, 0x67, 0xef, 0x52, 0xb9, 0x06,
	0x9e, 0x82, 0xb5, 0x95, 0x39, 0xee, 0x4d, 0x37, 0x53, 0xb9, 0xff, 0x9f, 0x6e, 0xf2, 0xa1, 0x5c,
	0xe3, 0xf5, 0xa3, 0xeb, 0x15, 0x37, 0x7e, 0xae, 0xb8, 0x71, 0xb3, 0xe2, 0xec, 0x53, 0xc4, 0xd9,
	0xf7, 0x88, 0xb3, 0x1f, 0x11, 0x67, 0xd7, 0x11, 0x67, 0xbf, 0x22, 0xce, 0xfe, 0x44, 0xdc, 0xb8,
	0x89, 0x38, 0xfb, 0xf2, 0x9b, 0x1b, 0xc3, 0x52, 0xfc, 0xbb, 0x1c, 0xff, 0x0d, 0x00, 0x00, 0xff,
	0xff, 0x28, 0xde, 0xcd, 0xef, 0x40, 0x03, 0x00, 0x00,
}
