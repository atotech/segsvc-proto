// Code generated by protoc-gen-gogo.
// source: bertram.proto
// DO NOT EDIT!

/*
	Package bertram is a generated protocol buffer package.

	It is generated from these files:
		bertram.proto

	It has these top-level messages:
		Experiment
		User
		ScoreData
*/
package bertram

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Experiment struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Segment string `protobuf:"bytes,2,opt,name=segment,proto3" json:"segment,omitempty"`
	Value   string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Experiment) Reset()                    { *m = Experiment{} }
func (*Experiment) ProtoMessage()               {}
func (*Experiment) Descriptor() ([]byte, []int) { return fileDescriptorBertram, []int{0} }

func (m *Experiment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Experiment) GetSegment() string {
	if m != nil {
		return m.Segment
	}
	return ""
}

func (m *Experiment) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type User struct {
	UserID string     `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	URI    string     `protobuf:"bytes,2,opt,name=URI,proto3" json:"URI,omitempty"`
	Labels string     `protobuf:"bytes,3,opt,name=labels,proto3" json:"labels,omitempty"`
	Scores *ScoreData `protobuf:"bytes,4,opt,name=scores" json:"scores,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorBertram, []int{1} }

func (m *User) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *User) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func (m *User) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *User) GetScores() *ScoreData {
	if m != nil {
		return m.Scores
	}
	return nil
}

type ScoreData struct {
	Segment map[string]int64 `protobuf:"bytes,1,rep,name=segment" json:"segment,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ScoreData) Reset()                    { *m = ScoreData{} }
func (*ScoreData) ProtoMessage()               {}
func (*ScoreData) Descriptor() ([]byte, []int) { return fileDescriptorBertram, []int{2} }

func (m *ScoreData) GetSegment() map[string]int64 {
	if m != nil {
		return m.Segment
	}
	return nil
}

func init() {
	proto.RegisterType((*Experiment)(nil), "Experiment")
	proto.RegisterType((*User)(nil), "User")
	proto.RegisterType((*ScoreData)(nil), "ScoreData")
}
func (this *Experiment) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Experiment)
	if !ok {
		that2, ok := that.(Experiment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Segment != that1.Segment {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *User) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	if this.URI != that1.URI {
		return false
	}
	if this.Labels != that1.Labels {
		return false
	}
	if !this.Scores.Equal(that1.Scores) {
		return false
	}
	return true
}
func (this *ScoreData) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ScoreData)
	if !ok {
		that2, ok := that.(ScoreData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Segment) != len(that1.Segment) {
		return false
	}
	for i := range this.Segment {
		if this.Segment[i] != that1.Segment[i] {
			return false
		}
	}
	return true
}
func (this *Experiment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&bertram.Experiment{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Segment: "+fmt.Sprintf("%#v", this.Segment)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *User) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&bertram.User{")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "URI: "+fmt.Sprintf("%#v", this.URI)+",\n")
	s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	if this.Scores != nil {
		s = append(s, "Scores: "+fmt.Sprintf("%#v", this.Scores)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScoreData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&bertram.ScoreData{")
	keysForSegment := make([]string, 0, len(this.Segment))
	for k, _ := range this.Segment {
		keysForSegment = append(keysForSegment, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSegment)
	mapStringForSegment := "map[string]int64{"
	for _, k := range keysForSegment {
		mapStringForSegment += fmt.Sprintf("%#v: %#v,", k, this.Segment[k])
	}
	mapStringForSegment += "}"
	if this.Segment != nil {
		s = append(s, "Segment: "+mapStringForSegment+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBertram(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringBertram(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Bertram service

type BertramClient interface {
	Get(ctx context.Context, in *User, opts ...grpc.CallOption) (*Experiment, error)
}

type bertramClient struct {
	cc *grpc.ClientConn
}

func NewBertramClient(cc *grpc.ClientConn) BertramClient {
	return &bertramClient{cc}
}

func (c *bertramClient) Get(ctx context.Context, in *User, opts ...grpc.CallOption) (*Experiment, error) {
	out := new(Experiment)
	err := grpc.Invoke(ctx, "/Bertram/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bertram service

type BertramServer interface {
	Get(context.Context, *User) (*Experiment, error)
}

func RegisterBertramServer(s *grpc.Server, srv BertramServer) {
	s.RegisterService(&_Bertram_serviceDesc, srv)
}

func _Bertram_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BertramServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bertram/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BertramServer).Get(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bertram_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Bertram",
	HandlerType: (*BertramServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Bertram_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bertram.proto",
}

func (m *Experiment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Experiment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBertram(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Segment) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBertram(dAtA, i, uint64(len(m.Segment)))
		i += copy(dAtA[i:], m.Segment)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBertram(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBertram(dAtA, i, uint64(len(m.UserID)))
		i += copy(dAtA[i:], m.UserID)
	}
	if len(m.URI) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBertram(dAtA, i, uint64(len(m.URI)))
		i += copy(dAtA[i:], m.URI)
	}
	if len(m.Labels) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBertram(dAtA, i, uint64(len(m.Labels)))
		i += copy(dAtA[i:], m.Labels)
	}
	if m.Scores != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBertram(dAtA, i, uint64(m.Scores.Size()))
		n1, err := m.Scores.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ScoreData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScoreData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Segment) > 0 {
		for k, _ := range m.Segment {
			dAtA[i] = 0xa
			i++
			v := m.Segment[k]
			mapSize := 1 + len(k) + sovBertram(uint64(len(k))) + 1 + sovBertram(uint64(v))
			i = encodeVarintBertram(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBertram(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintBertram(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func encodeFixed64Bertram(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Bertram(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBertram(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Experiment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBertram(uint64(l))
	}
	l = len(m.Segment)
	if l > 0 {
		n += 1 + l + sovBertram(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBertram(uint64(l))
	}
	return n
}

func (m *User) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovBertram(uint64(l))
	}
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovBertram(uint64(l))
	}
	l = len(m.Labels)
	if l > 0 {
		n += 1 + l + sovBertram(uint64(l))
	}
	if m.Scores != nil {
		l = m.Scores.Size()
		n += 1 + l + sovBertram(uint64(l))
	}
	return n
}

func (m *ScoreData) Size() (n int) {
	var l int
	_ = l
	if len(m.Segment) > 0 {
		for k, v := range m.Segment {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBertram(uint64(len(k))) + 1 + sovBertram(uint64(v))
			n += mapEntrySize + 1 + sovBertram(uint64(mapEntrySize))
		}
	}
	return n
}

func sovBertram(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBertram(x uint64) (n int) {
	return sovBertram(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Experiment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Experiment{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Segment:` + fmt.Sprintf("%v", this.Segment) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *User) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&User{`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`URI:` + fmt.Sprintf("%v", this.URI) + `,`,
		`Labels:` + fmt.Sprintf("%v", this.Labels) + `,`,
		`Scores:` + strings.Replace(fmt.Sprintf("%v", this.Scores), "ScoreData", "ScoreData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScoreData) String() string {
	if this == nil {
		return "nil"
	}
	keysForSegment := make([]string, 0, len(this.Segment))
	for k, _ := range this.Segment {
		keysForSegment = append(keysForSegment, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSegment)
	mapStringForSegment := "map[string]int64{"
	for _, k := range keysForSegment {
		mapStringForSegment += fmt.Sprintf("%v: %v,", k, this.Segment[k])
	}
	mapStringForSegment += "}"
	s := strings.Join([]string{`&ScoreData{`,
		`Segment:` + mapStringForSegment + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBertram(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Experiment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertram
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Experiment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Experiment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertram
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertram
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertram
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertram(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertram
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertram
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertram
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertram
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBertram
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBertram
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scores == nil {
				m.Scores = &ScoreData{}
			}
			if err := m.Scores.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertram(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertram
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScoreData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBertram
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScoreData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScoreData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBertram
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBertram
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthBertram
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Segment == nil {
				m.Segment = make(map[string]int64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBertram
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBertram
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvalue |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Segment[mapkey] = mapvalue
			} else {
				var mapvalue int64
				m.Segment[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBertram(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBertram
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBertram(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBertram
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBertram
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBertram
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBertram
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBertram
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBertram(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBertram = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBertram   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("bertram.proto", fileDescriptorBertram) }

var fileDescriptorBertram = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x51, 0xcd, 0x6a, 0xf2, 0x40,
	0x14, 0xcd, 0x18, 0x7f, 0xf0, 0xea, 0x07, 0x1f, 0x43, 0x69, 0x83, 0x94, 0x41, 0xb2, 0x92, 0xd2,
	0x26, 0x68, 0x37, 0xe2, 0x52, 0x94, 0xe2, 0xae, 0x28, 0x3e, 0xc0, 0x58, 0x2e, 0x41, 0x1a, 0x13,
	0x99, 0x8c, 0x52, 0xbb, 0x2a, 0x7d, 0x82, 0x42, 0x5f, 0xa2, 0x8f, 0xd2, 0xa5, 0xd0, 0x4d, 0x97,
	0x75, 0xda, 0x45, 0x97, 0x3e, 0x42, 0x99, 0x64, 0x6a, 0xba, 0x3b, 0x3f, 0xc9, 0xe1, 0x9c, 0x3b,
	0xf0, 0x6f, 0x86, 0x42, 0x0a, 0xbe, 0xf0, 0x96, 0x22, 0x96, 0x71, 0xe3, 0x34, 0x88, 0xe3, 0x20,
	0x44, 0x9f, 0x2f, 0xe7, 0x3e, 0x8f, 0xa2, 0x58, 0x72, 0x39, 0x8f, 0xa3, 0x24, 0x73, 0xdd, 0x6b,
	0x80, 0xe1, 0xdd, 0x12, 0xc5, 0x7c, 0x81, 0x91, 0xa4, 0x14, 0x8a, 0x11, 0x5f, 0xa0, 0x43, 0x9a,
	0xa4, 0x55, 0x1d, 0xa7, 0x98, 0x3a, 0x50, 0x49, 0x30, 0xd0, 0xb6, 0x53, 0x48, 0xe5, 0x5f, 0x4a,
	0x8f, 0xa0, 0xb4, 0xe6, 0xe1, 0x0a, 0x1d, 0x3b, 0xd5, 0x33, 0xe2, 0x86, 0x50, 0x9c, 0x26, 0x28,
	0xe8, 0x31, 0x94, 0x57, 0x09, 0x8a, 0xd1, 0xc0, 0xa4, 0x19, 0x46, 0xff, 0x83, 0x3d, 0x1d, 0x8f,
	0x4c, 0x96, 0x86, 0xfa, 0xcb, 0x90, 0xcf, 0x30, 0x4c, 0x4c, 0x90, 0x61, 0xd4, 0x85, 0x72, 0x72,
	0x13, 0x0b, 0x4c, 0x9c, 0x62, 0x93, 0xb4, 0x6a, 0x1d, 0xf0, 0x26, 0x9a, 0x0e, 0xb8, 0xe4, 0x63,
	0xe3, 0xb8, 0xf7, 0x50, 0x3d, 0x88, 0xb4, 0x9d, 0x57, 0x25, 0x4d, 0xbb, 0x55, 0xeb, 0x9c, 0xe4,
	0x7f, 0x78, 0x93, 0xcc, 0x19, 0x46, 0x52, 0x6c, 0x0e, 0x1b, 0x1a, 0x3d, 0xa8, 0xff, 0x35, 0x74,
	0xbb, 0x5b, 0xdc, 0x98, 0xca, 0x1a, 0xe6, 0x2b, 0x75, 0x63, 0xdb, 0xac, 0xec, 0x15, 0xba, 0xa4,
	0xd3, 0x85, 0x4a, 0x3f, 0x3b, 0x35, 0xbd, 0x00, 0xfb, 0x0a, 0x25, 0x2d, 0x79, 0x7a, 0x7a, 0xa3,
	0xe6, 0xe5, 0x37, 0x75, 0xe9, 0xe3, 0xdb, 0xd7, 0x73, 0xa1, 0xee, 0x56, 0xfc, 0x75, 0xdb, 0x0f,
	0x50, 0xf6, 0xc8, 0x59, 0xff, 0x7c, 0xbb, 0x63, 0xd6, 0xfb, 0x8e, 0x59, 0xfb, 0x1d, 0x23, 0x0f,
	0x8a, 0x91, 0x17, 0xc5, 0xc8, 0xab, 0x62, 0x64, 0xab, 0x18, 0xf9, 0x50, 0x8c, 0x7c, 0x2b, 0x66,
	0xed, 0x15, 0x23, 0x4f, 0x9f, 0xcc, 0x9a, 0x95, 0xd3, 0xa7, 0xba, 0xfc, 0x09, 0x00, 0x00, 0xff,
	0xff, 0x6a, 0xcf, 0x5f, 0x9d, 0xd9, 0x01, 0x00, 0x00,
}
